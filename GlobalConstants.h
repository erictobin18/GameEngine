//
//  GlobalConstants.h
//  CppProgram
//
//  Created by Eric Tobin on 9/13/14.
//  Copyright (c) 2014 omnisciendus. All rights reserved.
//


#ifndef _GLOBAL_CONSTANTS_H_
#define _GLOBAL_CONSTANTS_H_

#include <vector>


//make this a namespace
//don't need typedefs


typedef enum componentType {noneType = 0, physicsType = 1, graphicsType = 2, physics_and_graphicsType = 3, logicType = 4, physics_and_logicType = 5, graphics_and_logicType = 6, all = 7} componentType;

struct quaternion //used to compute rotations, Wikipedia has a good article
{
    float s;
    float i;
    float j;
    float k;
};

struct vect //"vector" is already used :)
{
    float x;
    float y;
    float z;
};

struct state //The "state" of an object consists of all its current kinematical properties
{
    vect pos;
    vect vel;
    quaternion orientation; //using quaternions is more efficient and solves gimbal lock
    vect omega; //this is the vector indicating rotation. Its magnitude is the angular speed,
                //and its direction indicates the normal to the plane of rotation
};

struct vertex
{
    float x;
    float y;
    float z;
    float texX;
    float texY;
}; //used in object models. There is likely a "right" way to do this that I'm unaware of,
   //but this should be just as efficient. The first three floats are the spacial location
   //of a vertex in the model, and the last two are the coordinates in its texture the
   //vertex is associated with.

/*
struct rgb_value //kept for future use
{
    unsigned char r;
    unsigned char g;
    unsigned char b;
}; //stores a color in RGB space.

 */
 
struct mesh //contains all information necessary to render a model, except its state
{
    std::vector<vertex> vertices;
    std::vector<unsigned int> indices;
    std::vector<unsigned char>texture;
    unsigned int texWidth;
    unsigned int texHeight;
};

struct file //currently, object files only contain the mesh data
{
    mesh m;
};

typedef unsigned int componentID;

typedef unsigned int entityID; //This and componentID are temporary until handles are implemented

typedef unsigned char bit_field; //Used for efficient switching based on what components an entity has

typedef unsigned int textureID; //values generated by OpenGL

#endif